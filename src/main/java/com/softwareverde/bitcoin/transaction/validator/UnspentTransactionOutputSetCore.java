package com.softwareverde.bitcoin.transaction.validator;

import com.softwareverde.bitcoin.block.Block;
import com.softwareverde.bitcoin.server.module.node.database.fullnode.FullNodeDatabaseManager;
import com.softwareverde.bitcoin.server.module.node.database.transaction.fullnode.FullNodeTransactionDatabaseManager;
import com.softwareverde.bitcoin.transaction.Transaction;
import com.softwareverde.bitcoin.transaction.input.TransactionInput;
import com.softwareverde.bitcoin.transaction.output.TransactionOutput;
import com.softwareverde.bitcoin.transaction.output.identifier.TransactionOutputIdentifier;
import com.softwareverde.constable.list.List;
import com.softwareverde.constable.list.mutable.MutableList;
import com.softwareverde.database.DatabaseException;
import com.softwareverde.logging.Logger;
import com.softwareverde.security.hash.sha256.Sha256Hash;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

public class UnspentTransactionOutputSetCore implements UnspentTransactionOutputSet {
    protected final FullNodeDatabaseManager _databaseManager;
    protected final Map<TransactionOutputIdentifier, TransactionOutput> _blockTransactionOutputs;

    protected UnspentTransactionOutputSetCore(final Map<TransactionOutputIdentifier, TransactionOutput> blockOutputs) {
        _databaseManager = null;
        _blockTransactionOutputs = blockOutputs;
    }

    protected UnspentTransactionOutputSetCore(final FullNodeDatabaseManager databaseManager, final Map<TransactionOutputIdentifier, TransactionOutput> blockOutputs) {
        _databaseManager = databaseManager;
        _blockTransactionOutputs = blockOutputs;
    }

    public static UnspentTransactionOutputSetCore loadOutputsForBlock(final FullNodeDatabaseManager databaseManager, final Block block) {
        final Map<TransactionOutputIdentifier, TransactionOutput> blockOutputs = new HashMap<TransactionOutputIdentifier, TransactionOutput>();

        final HashSet<TransactionOutputIdentifier> requiredTransactionOutputs = new HashSet<TransactionOutputIdentifier>();
        final List<Transaction> transactions = block.getTransactions();
        for (final Transaction transaction : transactions) {
            final Sha256Hash transactionHash = transaction.getHash();

            { // Add the PreviousTransactionOutputs to the list of outputs to retrieve...
                final List<TransactionInput> transactionInputs = transaction.getTransactionInputs();
                for (final TransactionInput transactionInput : transactionInputs) {
                    final TransactionOutputIdentifier transactionOutputIdentifier = TransactionOutputIdentifier.fromTransactionInput(transactionInput);
                    final boolean isUnique = requiredTransactionOutputs.add(transactionOutputIdentifier);
                    if (! isUnique) { // Two inputs cannot same the same output...
                        return null;
                    }
                }
            }

            { // Add outputs generated by this block to the outputs set...
                final List<TransactionOutput> transactionOutputs = transaction.getTransactionOutputs();
                for (int i = 0; i < transactionOutputs.getCount(); ++i) {
                    final TransactionOutput transactionOutput = transactionOutputs.get(i);
                    final TransactionOutputIdentifier transactionOutputIdentifier = new TransactionOutputIdentifier(transactionHash, i);
                    final TransactionOutput previousValue = blockOutputs.put(transactionOutputIdentifier, transactionOutput);
                    if (previousValue != null) { // A block cannot create the duplicate outputs...
                        return null;
                    }
                }
            }
        }

        try {
            final List<TransactionOutputIdentifier> transactionOutputIdentifiers = new MutableList<TransactionOutputIdentifier>(requiredTransactionOutputs);
            final FullNodeTransactionDatabaseManager transactionDatabaseManager = databaseManager.getTransactionDatabaseManager();
             final List<TransactionOutput> transactionOutputs = transactionDatabaseManager.getUnspentTransactionOutputs(transactionOutputIdentifiers);
             for (int i = 0; i < transactionOutputs.getCount(); ++i) {
                 final TransactionOutputIdentifier transactionOutputIdentifier = transactionOutputIdentifiers.get(i);
                 final TransactionOutput transactionOutput = transactionOutputs.get(i);
                 blockOutputs.put(transactionOutputIdentifier, transactionOutput);
             }
        }
        catch (final DatabaseException exception) {
            Logger.warn(exception);
        }

        return new UnspentTransactionOutputSetCore(null, blockOutputs);
    }

    @Override
    public TransactionOutput getUnspentTransactionOutput(final TransactionOutputIdentifier transactionOutputIdentifier) {
        final TransactionOutput transactionOutput = _blockTransactionOutputs.get(transactionOutputIdentifier);
        if (transactionOutput != null) {
            return transactionOutput;
        }

        try {
            final FullNodeTransactionDatabaseManager transactionDatabaseManager = _databaseManager.getTransactionDatabaseManager();
            return transactionDatabaseManager.getUnspentTransactionOutput(transactionOutputIdentifier);
        }
        catch (final DatabaseException exception) {
            Logger.error(exception);
            return null;
        }
    }
}
